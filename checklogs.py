import paramiko
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from config import initialize_config, load_config, save_config, set_channel, last_error_notification, CONFIG_PATH

# –ø—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É –º–æ–Ω–∏—Ç–æ—Ä—É –∏ —á–µ–∫–∞–µ–º —É–∫–∞–∑–∞–Ω–Ω—ã–π –ª–æ–≥
async def check_logs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    config = load_config()
    channel_id = config.get('telegram_channel')
    monitors = config.get('servers', {})

    if not channel_id:
        if update:
            await update.message.reply_text("–ö–∞–Ω–∞–ª –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /set_channel –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏.")
        return

    for name, server in monitors.items():
        if server.get('status') != 'on':  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ –º–æ–Ω–∏—Ç–æ—Ä
            continue

        host = server['host']
        username = server['login']
        password = server['password']
        log_path = server['log_path']
        keywords = [kw.lower() for kw in server['keywords']]  # –ù–µ—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É
        exclusions = [ex.lower() for ex in server.get('exclusions', [])]  # –ò—Å–∫–ª—é—á–µ–Ω–∏—è
        lines_to_tail = server.get('lines_to_tail', 50)

        try:
            ssh_client = paramiko.SSHClient()
            ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            ssh_client.connect(host, username=username, password=password)

            command = f"tail -n {lines_to_tail} {log_path}"
            stdin, stdout, stderr = ssh_client.exec_command(command)

            logs = stdout.readlines()

            last_error_notification.setdefault(name, {})

            for line in logs:
                lower_line = line.lower()
                if any(keyword in lower_line for keyword in keywords) and not any(exc in lower_line for exc in exclusions):
                    now = datetime.now()
                    matched_keywords = [kw for kw in keywords if kw in lower_line]

                    for keyword in matched_keywords:
                        last_notification = last_error_notification[name].get(keyword)

                        if not last_notification or (now - last_notification).total_seconds() >= 300:
                            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞–∫–æ–≤ "!" –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
                            if "error" in keyword:
                                prefix = "‚õîÔ∏è ERROR"
                            elif "crit" in keyword:
                                prefix = "‚ùå CRIT"
                            elif "warn" in keyword:
                                prefix = "‚ö†Ô∏è WARN"
                            elif "info" in keyword:
                                prefix = "‚ÑπÔ∏è INFO"
                            else:
                                prefix = ""

                            message = f"{prefix} –Ω–∞ {name}: {line.strip()}"
                            await context.bot.send_message(chat_id=channel_id, text=message)

                            last_error_notification[name][keyword] = now

            ssh_client.close()

        except Exception as e:
            error_message = f"üìç –£–ø—Å, –ø–æ—Ö–æ–∂–µ —Å–µ—Ä–≤–µ—Ä {name} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {str(e)}"
            try:
                await context.bot.send_message(chat_id=channel_id, text=error_message)
            except Exception as send_error:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {send_error}")

# –ø–µ—Ä–µ–æ–¥–∏—á–µ—Å–∫–∏ –≤—ã–∑—ã–≤–∞–µ–º check_logs
async def scheduled_check_logs(context: ContextTypes.DEFAULT_TYPE):
    await check_logs(None, context)