import paramiko
from config import initialize_config, load_config
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# —Å–±–æ—Ä –º–µ—Ç—Ä–∏–∫ —Å —Å–µ—Ä–≤–µ—Ä–∞
async def get_server_metrics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∏–º—è —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏—à–ª–æ –∏–∑ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –∫–Ω–æ–ø–∫–∏
    server_name = None
    if update.callback_query:  # –ï—Å–ª–∏ –≤—ã–∑–æ–≤ –∏–∑ –∫–Ω–æ–ø–∫–∏
        server_name = update.callback_query.data.split(" ")[1]
    elif len(context.args) >= 1:  # –ï—Å–ª–∏ –≤—ã–∑–æ–≤ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        server_name = context.args[0]
    
    if not server_name:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è —Å–µ—Ä–≤–µ—Ä–∞. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /getm <–∏–º—è —Å–µ—Ä–≤–µ—Ä–∞>")
        return

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = load_config()
    server = config.get('servers', {}).get(server_name)

    if not server:
        await update.message.reply_text(f"–°–µ—Ä–≤–µ—Ä —Å –∏–º–µ–Ω–µ–º '{server_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
        return

    host = server['host']
    username = server['login']
    password = server['password']

    try:
        ssh_client = paramiko.SSHClient()
        ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh_client.connect(host, username=username, password=password)

        # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫
        commands = {
            "cpu": "top -bn1 | grep 'Cpu(s)' | awk '{print $2 + $4}'",  # CPU –∑–∞–≥—Ä—É–∑–∫–∞
            "mem": "free -m | awk '/Mem:/ {print $3 \"MB –∏–∑ \" $2 \"MB\"}'",  # –ü–∞–º—è—Ç—å
            "disk": "df -h / | awk 'NR==2 {print $4}'"  # –°–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–∞ /
        }

        results = {}
        for key, cmd in commands.items():
            stdin, stdout, stderr = ssh_client.exec_command(cmd)
            results[key] = stdout.read().decode().strip()

        metrics_report = (
            f"–ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ **{server_name} ({host})**:\n"
            f"üí° CPU: {results.get('cpu', 'N/A')}%\n"
            f"üí° –ü–∞–º—è—Ç—å: {results.get('mem', 'N/A')}\n"
            f"üí° –°–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ: {results.get('disk', 'N/A')}\n"
        )
        ssh_client.close()

    except Exception as e:
        metrics_report = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –º–µ—Ç—Ä–∏–∫ —Å —Å–µ—Ä–≤–µ—Ä–∞ '{server_name}': {e}"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if update.callback_query:
        await update.callback_query.message.reply_text(metrics_report)
    else:
        await update.message.reply_text(metrics_report)





# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞—É–¥–∏—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞
async def get_server_audit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è —Å–µ—Ä–≤–µ—Ä–∞ –∏–∑ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã
    server_name = None
    if update.callback_query:  # –ï—Å–ª–∏ –≤—ã–∑–æ–≤ –∏–∑ –∫–Ω–æ–ø–∫–∏
        server_name = update.callback_query.data.split(" ")[1]
    elif len(context.args) >= 1:  # –ï—Å–ª–∏ –≤—ã–∑–æ–≤ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        server_name = context.args[0]
    
    if not server_name:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è —Å–µ—Ä–≤–µ—Ä–∞. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /audit <–∏–º—è —Å–µ—Ä–≤–µ—Ä–∞>")
        return

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = load_config()
    server = config.get('servers', {}).get(server_name)

    if not server:
        await update.message.reply_text(f"–°–µ—Ä–≤–µ—Ä —Å –∏–º–µ–Ω–µ–º '{server_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
        return

    host = server['host']
    username = server['login']
    password = server['password']

    try:
        ssh_client = paramiko.SSHClient()
        ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh_client.connect(host, username=username, password=password)

        # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        commands = {
            "hostname": "hostname",
            "os": "cat /etc/os-release | grep PRETTY_NAME | cut -d'\"' -f2",
            "uptime": "uptime -p",
            "uptime_since": "uptime -s",
            "cpu_model": "lscpu | grep 'Model name' | cut -d':' -f2 | xargs",
            "cpu_cores": "nproc",
            "total_mem": "free -h | awk '/^Mem:/ {print $2}'",
            "total_disk": "df -h / | awk 'NR==2 {print $2}'",
            "public_ip": "curl -s https://api.ipify.org",
            "load_average": "uptime | awk -F'load average:' '{print $2}' | xargs",
            "reboot_required": "[ -f /var/run/reboot-required ] && echo 'YES' || echo 'NO'",
            "ssh_root_login": "grep '^PermitRootLogin' /etc/ssh/sshd_config | awk '{print $2}'",
            "firewall_status": "ufw status | grep 'Status:' | awk '{print $2}'",
            "failed_logins": "grep 'Failed password' /var/log/auth.log 2>/dev/null | wc -l",
            "unattended_upgrades": "dpkg -l | grep unattended-upgrades | wc -l",
            "password_policy": "grep 'minlen' /etc/security/pwquality.conf 2>/dev/null | awk '{print $3}'",
            "suid_files": "find / -type f -perm -4000 2>/dev/null | wc -l",
            "system_updates": "apt-get -s upgrade | grep -P '^ upgraded' | awk '{print $1}'",
            "ssh_port": "grep '^Port' /etc/ssh/sshd_config | awk '{print $2}' || echo 22",
            "intrusion_prevention": "systemctl is-active fail2ban || systemctl is-active crowdsec || echo 'inactive'"
        }

        results = {}
        for key, cmd in commands.items():
            stdin, stdout, stderr = ssh_client.exec_command(cmd)
            result = stdout.read().decode().strip()
            results[key] = result if result else "-"

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞—É–¥–∏—Ç–∞
        audit_report = (
            f"–ê—É–¥–∏—Ç —Å–µ—Ä–≤–µ—Ä–∞ {server_name} ({host}):\n\n"
            f"üñ•Ô∏è –•–æ—Å—Ç–Ω–µ–π–º: {results.get('hostname', '-')}\n"
            f"üíª –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: {results.get('os', '-')}\n"
            f"‚è≥ –ê–ø—Ç–∞–π–º: {results.get('uptime', '-')} (—Å {results.get('uptime_since', '-')})\n"
            f"‚öôÔ∏è –ú–æ–¥–µ–ª—å CPU: {results.get('cpu_model', '-')}\n"
            f"üßµ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —è–¥–µ—Ä: {results.get('cpu_cores', '-')}\n"
            f"üóÑÔ∏è –û–±—â–∞—è –ø–∞–º—è—Ç—å: {results.get('total_mem', '-')}\n"
            f"üíæ –û–±—â–∏–π –æ–±—ä—ë–º –¥–∏—Å–∫–∞: {results.get('total_disk', '-')}\n"
            f"üåê –ü—É–±–ª–∏—á–Ω—ã–π IP: {results.get('public_ip', '-')}\n"
            f"üìä –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä—É–∑–∫–∞: {results.get('load_average', '-')}\n\n"
            f"üîÑ –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞: {results.get('reboot_required', '-')}\n"
            f"üîê Root –¥–æ—Å—Ç—É–ø –ø–æ SSH: {results.get('ssh_root_login', '-')}\n"
            f"üõ°Ô∏è –°—Ç–∞—Ç—É—Å –±—Ä–∞–Ω–¥–º–∞—É—ç—Ä–∞: {results.get('firewall_status', '-')}\n"
            f"‚ö†Ô∏è –ù–µ—É–¥–∞—á–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –≤—Ö–æ–¥–∞: {results.get('failed_logins', '-')}\n"
            f"üîÑ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {'–í–∫–ª—é—á–µ–Ω—ã' if results.get('unattended_upgrades', '0') != '0' else '–û—Ç–∫–ª—é—á–µ–Ω—ã'}\n"
            f"üîë –ü–æ–ª–∏—Ç–∏–∫–∞ –ø–∞—Ä–æ–ª–µ–π (minlen): {results.get('password_policy', '-')}\n"
            f"üîç –ù–∞–π–¥–µ–Ω–æ SUID —Ñ–∞–π–ª–æ–≤: {results.get('suid_files', '-')}\n"
            f"üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {results.get('system_updates', '-')}\n"
            f"üö™ –ü–æ—Ä—Ç SSH: {results.get('ssh_port', '-')}\n"
            f"üõ°Ô∏è –°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –≤—Ç–æ—Ä–∂–µ–Ω–∏–π (Fail2ban,CrowdSec and others): {results.get('intrusion_prevention', '-')}\n"
        )

        ssh_client.close()

    except Exception as e:
        audit_report = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞—É–¥–∏—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞ '{server_name}': {e}"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if update.callback_query:
        await update.callback_query.message.reply_text(audit_report)
    else:
        await update.message.reply_text(audit_report)

