from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from config import initialize_config, load_config, save_config, set_channel, last_error_notification, CONFIG_PATH
from getmet import get_server_metrics, get_server_audit
from checklogs import scheduled_check_logs
from monitor import add_monitor, remove_monitor, edit_monitor, show_monitors, start_monitor, stop_monitor, check_logs, show_monitor_details, toggle_monitor_status, delete_monitor, edit_monitor_prompt


# –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ä—Ç, –¥–µ–ª–∞–µ–º —Å–≤–µ—Ä–∫—É –Ω–∞ –∞–¥–º–∏–Ω–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    config = load_config()
    allowed_user_id = config.get('allowed_user_id')

    if user_id != allowed_user_id:
        await update.message.reply_text("‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞!")
        return

    await show_main_menu(update)

# –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Å —É—Å–ª–æ–≤–∏–µ–º
async def show_main_menu(update: Update):
    keyboard = [
        [InlineKeyboardButton("\ud83e\ude84 –î–æ–±–∞–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä", callback_data='add_monitor')],
        [InlineKeyboardButton("\ud83d\udda5 –ú–æ–∏ –º–æ–Ω–∏—Ç–æ—Ä—ã", callback_data='show_monitors')],
        [InlineKeyboardButton("\u2699\ufe0f –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã", callback_data='show_commands')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.callback_query:
        await update.callback_query.edit_message_text(
            "üöÄ –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é\n\n –¢—ã –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä, –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–µ (–≤–∫–ª—é—á–∞—è –∏—Ö —Å—Ç–∞—Ç—É—Å), –∞ —Ç–∞–∫ –∂–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã.", reply_markup=reply_markup
        )
    else:
        await update.message.reply_text(
            "üôã‚Äç‚ôÇÔ∏è–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! \n\n–î–∞–Ω–Ω—ã–π –±–æ—Ç –ø–æ–∑–≤–æ–ª–∏—Ç —Ç–µ–±–µ –¥–æ–±–∞–≤–ª—è—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–∞ –Ω–∞ —Ç–≤–æ–∏—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö –∏–ª–∏ –Ω–æ–¥–∞—Ö. \n\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–∞–∂–º–∏ '–î–æ–±–∞–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä'.\n",
            reply_markup=reply_markup,
        )

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    callback_data = query.data
    if callback_data == 'add_monitor':
        keyboard = [[InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data='main_menu')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "‚ùï–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∫–æ–º–∞–Ω–¥—É /add_mon —Å–æ —Å–≤–æ–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:\n\n"
            "/add_mon <–Ω–∞–∑–≤–∞–Ω–∏–µ> <—Ö–æ—Å—Ç> <–ª–æ–≥–∏–Ω> <–ø–∞—Ä–æ–ª—å> <–ø—É—Ç—å –∫ –ª–æ–≥—É> <–∫–æ–ª-–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç—Ä–æ–∫ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞> <–∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)> <–∏—Å–∫–ª—é—á–µ–Ω–∏—è (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)>",
            reply_markup=reply_markup,
        )
    elif callback_data == 'show_monitors':
        await show_monitors(update, context)
    elif callback_data.startswith('monitor:'):
        monitor_name = callback_data.split(':')[1]
        await show_monitor_details(update, context, monitor_name)
    elif callback_data.startswith('toggle:'):
        monitor_name = callback_data.split(':')[1]
        await toggle_monitor_status(update, context, monitor_name)
    elif callback_data.startswith('/edit_mon'):  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å"
        monitor_name = query.message.reply_markup.inline_keyboard[0][0].callback_data.split(':')[1]
        config = load_config()
        monitor = config.get('servers', {}).get(monitor_name)

        if not monitor:
            await query.message.reply_text(f"‚ùå –ú–æ–Ω–∏—Ç–æ—Ä '{monitor_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        messcommand = (
            f"–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–µ–∫—É—â—É—é –∫–æ–º–∞–Ω–¥—É, –∏–∑–º–µ–Ω–∏—Ç–µ –µ–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ:\n\n"
            f"/edit_mon {monitor_name} {monitor['host']} {monitor['login']} {monitor['password']} "
            f"{monitor['log_path']} {monitor['lines_to_tail']} {','.join(monitor['keywords'])} "
            f"{','.join(monitor['exclusions'])}"
        )

        await query.message.reply_text(messcommand)
    elif callback_data.startswith('delete:'):
        monitor_name = callback_data.split(':')[1]
        config = load_config()
        monitor = config.get('servers', {}).get(monitor_name)

        if not monitor:
            await query.message.reply_text(f"‚ùå –ú–æ–Ω–∏—Ç–æ—Ä '{monitor_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –£–¥–∞–ª—è–µ–º –º–æ–Ω–∏—Ç–æ—Ä
        del config['servers'][monitor_name]
        save_config(config)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è
        keyboard = [
            [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –º–æ–Ω–∏—Ç–æ—Ä–æ–≤", callback_data='show_monitors')],
            [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data='main_menu')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.edit_text(f"‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä '{monitor_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.", reply_markup=reply_markup)
    elif callback_data.startswith("/getm"):
        server_name = callback_data.split(" ")[1]  
        await get_server_metrics(update, context) 
    elif callback_data.startswith("/audit"):
        server_name = callback_data.split(" ")[1] 
        await get_server_audit(update, context)  
    elif callback_data == 'show_commands':
        keyboard = [[InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data='main_menu')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "‚öôÔ∏è –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
            "/add_mon <–Ω–∞–∑–≤–∞–Ω–∏–µ> <—Ö–æ—Å—Ç> <–ª–æ–≥–∏–Ω> <–ø–∞—Ä–æ–ª—å> <–ø—É—Ç—å –∫ –ª–æ–≥—É> <–∫–æ–ª-–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç—Ä–æ–∫> <–∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)> <–∏—Å–∫–ª—é—á–µ–Ω–∏—è (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)>\n"
            "/rem_mon <–Ω–∞–∑–≤–∞–Ω–∏–µ>\n"
            "/edit_mon <–Ω–∞–∑–≤–∞–Ω–∏–µ> <—Ö–æ—Å—Ç> <–ª–æ–≥–∏–Ω> <–ø–∞—Ä–æ–ª—å> <–ø—É—Ç—å –∫ –ª–æ–≥—É> <–∫–æ–ª-–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç—Ä–æ–∫> <–∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)>\n"
            "/set_channel <id –∫–∞–Ω–∞–ª–∞> - –£–∫–∞–∑–∞—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
            "/start_mon <–Ω–∞–∑–≤–∞–Ω–∏–µ> - –∑–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∞\n"
            "/stop_mon <–Ω–∞–∑–≤–∞–Ω–∏–µ> - –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∞\n\n"
            "üõ† –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
            "/check_logs - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ –¥–ª—è –≤—Å–µ—Ö –º–æ–Ω–∏—Ç–æ—Ä–æ–≤ –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ\n"
            "/audit - –ü—Ä–æ–≤–µ—Å—Ç–∏ –∞—É–¥–∏—Ç —Å–µ—Ä–≤–µ—Ä–∞\n"
            "/getm <–Ω–∞–∑–≤–∞–Ω–∏–µ> - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞\n",
            reply_markup=reply_markup,
        )
    elif callback_data == 'main_menu':
        await show_main_menu(update)






# –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
async def show_commands(update: Update):
    
    commands = (
        "/add_mon <–Ω–∞–∑–≤–∞–Ω–∏–µ> <—Ö–æ—Å—Ç> <–ª–æ–≥–∏–Ω> <–ø–∞—Ä–æ–ª—å> <–ø—É—Ç—å –∫ –ª–æ–≥—É> <–∫–æ–ª-–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å—Ç—Ä–æ–∫> <–∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)>\n"
        "/rem_mon <–Ω–∞–∑–≤–∞–Ω–∏–µ>\n"
        "/edit_mon <–Ω–∞–∑–≤–∞–Ω–∏–µ> <—Ö–æ—Å—Ç> <–ª–æ–≥–∏–Ω> <–ø–∞—Ä–æ–ª—å> <–ø—É—Ç—å –∫ –ª–æ–≥—É> <–∫–æ–ª-–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å—Ç—Ä–æ–∫> <–∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)>\n"
        "/set_channel <id –∫–∞–Ω–∞–ª–∞> - –£–∫–∞–∑–∞—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
        "/check_logs - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ –¥–ª—è –≤—Å–µ—Ö –º–æ–Ω–∏—Ç–æ—Ä–æ–≤\n"
        "/audit <–Ω–∞–∑–≤–∞–Ω–∏–µ> - –ü—Ä–æ–≤–µ—Å—Ç–∏ –∞—É–¥–∏—Ç —Å–µ—Ä–≤–µ—Ä–∞\n"
        "/getm <–Ω–∞–∑–≤–∞–Ω–∏–µ> - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞\n"
    )
    await update.message.reply_text(commands)



def main():
    initialize_config()
    config = load_config()
    token = config['telegram_token']
    check_logs_interval = config.get('check_logs_interval', 300)  

    application = Application.builder().token(token).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("add_mon", add_monitor))
    application.add_handler(CommandHandler("rem_mon", remove_monitor))
    application.add_handler(CommandHandler("edit_mon", edit_monitor))
    application.add_handler(CommandHandler("show", show_monitors))
    application.add_handler(CommandHandler("set_channel", set_channel))
    application.add_handler(CommandHandler("check_logs", check_logs))
    application.add_handler(CommandHandler("getm", get_server_metrics))
    application.add_handler(CommandHandler("audit", get_server_audit))
    application.add_handler(CommandHandler("start_mon", start_monitor))
    application.add_handler(CommandHandler("stop_mon", stop_monitor))
    application.add_handler(CallbackQueryHandler(button))
    

    job_queue = application.job_queue
    job_queue.run_repeating(scheduled_check_logs, interval=check_logs_interval, first=0) 

    application.run_polling()

if __name__ == '__main__':
    main()