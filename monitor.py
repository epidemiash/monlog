import paramiko
from datetime import datetime, timedelta
from config import initialize_config, load_config, save_config, last_error_notification, CONFIG_PATH
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes



# –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∞
# –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∞
async def add_monitor(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        args = context.args
        if len(args) < 7:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
            await update.message.reply_text(
                "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_mon <–Ω–∞–∑–≤–∞–Ω–∏–µ> <—Ö–æ—Å—Ç> <–ª–æ–≥–∏–Ω> <–ø–∞—Ä–æ–ª—å> <–ø—É—Ç—å –∫ –ª–æ–≥—É> <–∫–æ–ª-–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç—Ä–æ–∫> <–∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)> <–∏—Å–∫–ª—é—á–µ–Ω–∏—è (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)>"
            )
            return

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        name, host, login, password, log_path, lines_to_tail, keywords = args[:7]

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–∞–∫ —Å—Ç—Ä–æ–∫—É –∏—Å–∫–ª—é—á–µ–Ω–∏–π
        exclusions = ' '.join(args[7:])  # –í—Å–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∞—Ä–≥—É–º–µ–Ω—Ç—ã –æ–±—ä–µ–¥–∏–Ω—è—é—Ç—Å—è –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É

        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
        lines_to_tail = int(lines_to_tail)
        keywords = keywords.split(',')
        exclusions = exclusions.split(',')

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = load_config()
        config['servers'][name] = {
            'host': host,
            'login': login,
            'password': password,
            'log_path': log_path,
            'lines_to_tail': lines_to_tail,
            'keywords': keywords,
            'exclusions': exclusions,
            'status': 'on'
        }

        save_config(config)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard = [
            [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –º–æ–Ω–∏—Ç–æ—Ä–æ–≤", callback_data='show_monitors')],
            [InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(f"‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä '{name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=reply_markup)
    except ValueError:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –ø–∞—Ä–∞–º–µ—Ç—Ä <–∫–æ–ª-–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç—Ä–æ–∫> –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
    except Exception as e:
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")




# —É–¥–∞–ª–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∞
async def remove_monitor(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        args = context.args
        if len(args) < 1:
            await update.message.reply_text(
                "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /rem_mon <–Ω–∞–∑–≤–∞–Ω–∏–µ>"
            )
            return

        name = args[0]

        config = load_config()
        if name in config['servers']:
            del config['servers'][name]
            save_config(config)

            # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            keyboard = [
                [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –º–æ–Ω–∏—Ç–æ—Ä–æ–≤", callback_data='show_monitors')],
                [InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(f"‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä '{name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.", reply_markup=reply_markup)
        else:
            await update.message.reply_text(f"‚ùå –ú–æ–Ω–∏—Ç–æ—Ä '{name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


async def delete_monitor(update: Update, context: ContextTypes.DEFAULT_TYPE, monitor_name: str):
    config = load_config()
    if monitor_name in config['servers']:
        del config['servers'][monitor_name]
        save_config(config)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard = [
            [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –º–æ–Ω–∏—Ç–æ—Ä–æ–≤", callback_data='show_monitors')],
            [InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.callback_query.edit_message_text(
            f"‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä '{monitor_name}' –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.",
            reply_markup=reply_markup
        )
    else:
        await update.callback_query.edit_message_text(f"‚ùå –ú–æ–Ω–∏—Ç–æ—Ä '{monitor_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")



# —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∞
# —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∞
async def edit_monitor(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        args = context.args
        if len(args) < 7:
            await update.message.reply_text(
                "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n\n"
                "/edit_mon <–Ω–∞–∑–≤–∞–Ω–∏–µ> <—Ö–æ—Å—Ç> <–ª–æ–≥–∏–Ω> <–ø–∞—Ä–æ–ª—å> <–ø—É—Ç—å –∫ –ª–æ–≥—É> "
                "<–∫–æ–ª-–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å—Ç—Ä–æ–∫> <–∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)> [–∏—Å–∫–ª—é—á–µ–Ω–∏—è (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)]"
            )
            return

        name, host, login, password, log_path, lines_to_tail, *keywords_and_exclusions = args
        lines_to_tail = int(lines_to_tail)

        # –†–∞–∑–¥–µ–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        if "|" in ' '.join(keywords_and_exclusions):
            keywords_part, exclusions_part = ' '.join(keywords_and_exclusions).split("|", 1)
            keywords = keywords_part.split(',')
            exclusions = exclusions_part.split(',')
        else:
            keywords = ' '.join(keywords_and_exclusions).split(',')
            exclusions = []

        config = load_config()
        if name not in config['servers']:
            await update.message.reply_text(f"‚ùå –ú–æ–Ω–∏—Ç–æ—Ä '{name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –º–æ–Ω–∏—Ç–æ—Ä–∞
        config['servers'][name] = {
            'host': host,
            'login': login,
            'password': password,
            'log_path': log_path,
            'lines_to_tail': lines_to_tail,
            'keywords': keywords,
            'exclusions': exclusions  # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        }

        save_config(config)

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard = [
            [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–æ–Ω–∏—Ç–æ—Ä–∞–º", callback_data='show_monitors')],
            [InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data='main_menu')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        await update.message.reply_text(f"‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä '{name}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!", reply_markup=reply_markup)

    except ValueError:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ø–∞—Ä–∞–º–µ—Ç—Ä <–∫–æ–ª-–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å—Ç—Ä–æ–∫> –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


async def edit_monitor_prompt(update: Update, context: ContextTypes.DEFAULT_TYPE, monitor_name: str):
    config = load_config()
    monitor = config.get('servers', {}).get(monitor_name)

    if not monitor:
        await update.callback_query.edit_message_text(f"‚ùå –ú–æ–Ω–∏—Ç–æ—Ä '{monitor_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    message = (
        f"‚úèÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∞ '{monitor_name}':\n\n"
        f"**–¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:**\n"
        f"- **IP/–•–æ—Å—Ç:** {monitor['host']}\n"
        f"- **–ü—É—Ç—å –∫ –ª–æ–≥—É:** {monitor['log_path']}\n"
        f"- **–ö–æ–ª-–≤–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:** {monitor['lines_to_tail']}\n"
        f"- **–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:** {', '.join(monitor['keywords'])}\n"
        f"- **–ò—Å–∫–ª—é—á–µ–Ω–∏—è:** {', '.join(monitor['exclusions'])}\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        f"`/edit_mon {monitor_name} <—Ö–æ—Å—Ç> <–ª–æ–≥–∏–Ω> <–ø–∞—Ä–æ–ª—å> <–ø—É—Ç—å –∫ –ª–æ–≥—É> <–∫–æ–ª-–≤–æ —Å—Ç—Ä–æ–∫> <–∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞> [–∏—Å–∫–ª—é—á–µ–Ω–∏—è]`",
    )

    await update.callback_query.edit_message_text(message, parse_mode='Markdown')



# –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä—ã
# –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä—ã
async def show_monitors(update: Update, context: ContextTypes.DEFAULT_TYPE):
    config = load_config()
    monitors = config.get('servers', {})

    if monitors:
        keyboard = []
        for name, data in monitors.items():
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∞
            status = data.get('status', 'off')
            icon = 'üî¥' if status == 'off' else 'üü¢'  # –ö—Ä–∞—Å–Ω—ã–π/–∑–µ–ª–µ–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä

            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∞ –∏ —Å—Ç–∞—Ç—É—Å–æ–º
            keyboard.append([InlineKeyboardButton(f"{icon} {name}", callback_data=f"monitor:{name}")])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard.append([InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data='main_menu')])
        reply_markup = InlineKeyboardMarkup(keyboard)

        message = "üñ•Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
    else:
        message = "‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–æ–≤."
        keyboard = [[InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data='main_menu')]]
        reply_markup = InlineKeyboardMarkup(keyboard)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if update.callback_query:
        await update.callback_query.edit_message_text(message, reply_markup=reply_markup)
    else:
        await update.message.reply_text(message, reply_markup=reply_markup)


# –î–µ—Ç–∞–ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∞       
async def show_monitor_details(update: Update, context: ContextTypes.DEFAULT_TYPE, monitor_name: str):
    config = load_config()
    monitor = config.get('servers', {}).get(monitor_name)

    if not monitor:
        await update.callback_query.edit_message_text(f"‚ùå –ú–æ–Ω–∏—Ç–æ—Ä '{monitor_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    status = "üü¢ –í–∫–ª—é—á–µ–Ω" if monitor.get('status') == 'on' else "üî¥ –í—ã–∫–ª—é—á–µ–Ω"
    message = (
        f"üìã **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–Ω–∏—Ç–æ—Ä–µ**\n\n"
        f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {monitor_name}\n"
        f"**–°—Ç–∞—Ç—É—Å:** {status}\n"
        f"**IP/–•–æ—Å—Ç:** {monitor['host']}\n"
        f"**–ü—É—Ç—å –∫ –ª–æ–≥—É:** {monitor['log_path']}\n"
        f"**–ö–æ–ª-–≤–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:** {monitor['lines_to_tail']}\n"
        f"**–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:** {', '.join(monitor['keywords'])}\n"
        f"**–ò—Å–∫–ª—é—á–µ–Ω–∏—è:** {', '.join(monitor['exclusions'])}\n"
    )

    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    keyboard = [
    [InlineKeyboardButton("üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å" if monitor.get('status') == 'on' else "‚ñ∂Ô∏è –í–∫–ª—é—á–∏—Ç—å", callback_data=f"toggle:{monitor_name}")],
    [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"/edit_mon {monitor_name}"),
     InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete:{monitor_name}")],
    [InlineKeyboardButton("üìä –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞–≥—Ä—É–∑–∫—É", callback_data=f"getm:{monitor_name}"),
     InlineKeyboardButton("üîç –ê—É–¥–∏—Ç", callback_data=f"audit:{monitor_name}")],
    [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É", callback_data='show_monitors')]
]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.callback_query.edit_message_text(message, reply_markup=reply_markup, parse_mode='Markdown')





async def toggle_monitor_status(update: Update, context: ContextTypes.DEFAULT_TYPE, monitor_name: str):
    config = load_config()
    monitor = config.get('servers', {}).get(monitor_name)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –º–æ–Ω–∏—Ç–æ—Ä
    if not monitor:
        await update.callback_query.edit_message_text(f"‚ùå –ú–æ–Ω–∏—Ç–æ—Ä '{monitor_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –ò–∑–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∞
    current_status = monitor.get('status', 'off')
    new_status = 'on' if current_status == 'off' else 'off'
    monitor['status'] = new_status
    save_config(config)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–æ–Ω—Ñ–∏–≥

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –¥–µ–π—Å—Ç–≤–∏–∏
    status_action = "–≤–∫–ª—é—á–µ–Ω" if new_status == 'on' else "–≤—ã–∫–ª—é—á–µ–Ω"
    await update.callback_query.answer(f"–ú–æ–Ω–∏—Ç–æ—Ä '{monitor_name}' {status_action}.")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    status_text = "üü¢ –í–∫–ª—é—á–µ–Ω" if new_status == 'on' else "üî¥ –í—ã–∫–ª—é—á–µ–Ω"
    message = (
        f"üìã **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–Ω–∏—Ç–æ—Ä–µ**\n\n"
        f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {monitor_name}\n"
        f"**–°—Ç–∞—Ç—É—Å:** {status_text}\n"
        f"**IP/–•–æ—Å—Ç:** {monitor['host']}\n"
        f"**–ü—É—Ç—å –∫ –ª–æ–≥—É:** {monitor['log_path']}\n"
        f"**–ö–æ–ª-–≤–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:** {monitor['lines_to_tail']}\n"
        f"**–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:** {', '.join(monitor['keywords'])}\n"
        f"**–ò—Å–∫–ª—é—á–µ–Ω–∏—è:** {', '.join(monitor['exclusions'])}\n"
    )

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    keyboard = [
        [InlineKeyboardButton("üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å" if new_status == 'on' else "‚ñ∂Ô∏è –í–∫–ª—é—á–∏—Ç—å", callback_data=f"toggle:{monitor_name}")],
        [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"/edit_mon {monitor_name}")],
        [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete:{monitor_name}")],
        [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É", callback_data='show_monitors')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await update.callback_query.edit_message_text(message, reply_markup=reply_markup, parse_mode='Markdown')





# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –º–æ–Ω–∏—Ç–æ—Ä–∞
async def toggle_monitor(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    config = load_config()
    monitors = config.get('servers', {})

    if not query.data:
        return

    action, monitor_name = query.data.split(":")

    if monitor_name in monitors:
        if action == 'start':
            monitors[monitor_name]['status'] = 'on'
            await query.edit_message_text(f"\u041c\u043e\u043d\u0438\u0442\u043e\u0440 {monitor_name} \u0432\u043a\u043b\u044e\u0447\u0435\u043d.")
        elif action == 'stop':
            monitors[monitor_name]['status'] = 'off'
            await query.edit_message_text(f"\u041c\u043e\u043d\u0438\u0442\u043e\u0440 {monitor_name} \u0432\u044b\u043a\u043b\u044e\u0447\u0435\u043d.")

        save_config(config)  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞

    # –ü–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞, –∑–∞–Ω–æ–≤–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–æ–≤
    await show_monitors(update, context)



# –í–∫–ª—é—á–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∞
async def start_monitor(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 1:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –º–æ–Ω–∏—Ç–æ—Ä–∞. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /start_mon <–Ω–∞–∑–≤–∞–Ω–∏–µ>")
        return

    monitor_name = context.args[0]
    config = load_config()

    if monitor_name not in config.get('servers', {}):
        await update.message.reply_text(f"–ú–æ–Ω–∏—Ç–æ—Ä —Å –∏–º–µ–Ω–µ–º '{monitor_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –ò–∑–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ 'on'
    config['servers'][monitor_name]['status'] = 'on'
    save_config(config)
    await update.message.reply_text(f"–ú–æ–Ω–∏—Ç–æ—Ä '{monitor_name}' –≤–∫–ª—é—á–µ–Ω.")

# –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∞
async def stop_monitor(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 1:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –º–æ–Ω–∏—Ç–æ—Ä–∞. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /stop_mon <–Ω–∞–∑–≤–∞–Ω–∏–µ>")
        return

    monitor_name = context.args[0]
    config = load_config()

    if monitor_name not in config.get('servers', {}):
        await update.message.reply_text(f"–ú–æ–Ω–∏—Ç–æ—Ä —Å –∏–º–µ–Ω–µ–º '{monitor_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –ò–∑–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ 'off'
    config['servers'][monitor_name]['status'] = 'off'
    save_config(config)
    await update.message.reply_text(f"–ú–æ–Ω–∏—Ç–æ—Ä '{monitor_name}' –æ—Ç–∫–ª—é—á–µ–Ω.")


# –ø—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É –º–æ–Ω–∏—Ç–æ—Ä—É –∏ —á–µ–∫–∞–µ–º —É–∫–∞–∑–∞–Ω–Ω—ã–π –ª–æ–≥
async def check_logs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    config = load_config()
    channel_id = config.get('telegram_channel')
    monitors = config.get('servers', {})

    if not channel_id:
        if update:
            await update.message.reply_text("–ö–∞–Ω–∞–ª –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /set_channel –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏.")
        return

    for name, server in monitors.items():
        if server.get('status') != 'on':  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ –º–æ–Ω–∏—Ç–æ—Ä
            continue

        host = server['host']
        username = server['login']
        password = server['password']
        log_path = server['log_path']
        keywords = [kw.lower() for kw in server['keywords']]  # –ù–µ—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É
        exclusions = [ex.lower() for ex in server.get('exclusions', [])]  # –ò—Å–∫–ª—é—á–µ–Ω–∏—è
        lines_to_tail = server.get('lines_to_tail', 50)

        try:
            ssh_client = paramiko.SSHClient()
            ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            ssh_client.connect(host, username=username, password=password)

            command = f"tail -n {lines_to_tail} {log_path}"
            stdin, stdout, stderr = ssh_client.exec_command(command)

            logs = stdout.readlines()

            last_error_notification.setdefault(name, {})

            for line in logs:
                lower_line = line.lower()
                if any(keyword in lower_line for keyword in keywords) and not any(exc in lower_line for exc in exclusions):
                    now = datetime.now()
                    matched_keywords = [kw for kw in keywords if kw in lower_line]

                    for keyword in matched_keywords:
                        last_notification = last_error_notification[name].get(keyword)

                        if not last_notification or (now - last_notification).total_seconds() >= 300:
                            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞–∫–æ–≤ "!" –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
                            if "error" in keyword:
                                prefix = "‚õîÔ∏è ERROR"
                            elif "crit" in keyword:
                                prefix = "‚ùå CRIT"
                            elif "warn" in keyword:
                                prefix = "‚ö†Ô∏è WARN"
                            elif "info" in keyword:
                                prefix = "‚ÑπÔ∏è INFO"
                            else:
                                prefix = ""

                            message = f"{prefix} –Ω–∞ {name}: {line.strip()}"
                            await context.bot.send_message(chat_id=channel_id, text=message)

                            last_error_notification[name][keyword] = now

            ssh_client.close()

        except Exception as e:
            error_message = f"üìç –£–ø—Å, –ø–æ—Ö–æ–∂–µ —Å–µ—Ä–≤–µ—Ä {name} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {str(e)}"
            try:
                await context.bot.send_message(chat_id=channel_id, text=error_message)
            except Exception as send_error:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {send_error}")

